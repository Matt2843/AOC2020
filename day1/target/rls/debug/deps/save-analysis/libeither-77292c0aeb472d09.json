{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1","program":"/home/matt/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","either","/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=77292c0aeb472d09","-C","extra-filename=-77292c0aeb472d09","--out-dir","/mnt/c/Users/Matt/Desktop/AOC2020/day1/target/rls/debug/deps","-L","dependency=/mnt/c/Users/Matt/Desktop/AOC2020/day1/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/matt/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/mnt/c/Users/Matt/Desktop/AOC2020/day1/target/rls/debug/deps/libeither-77292c0aeb472d09.rmeta"},"prelude":{"crate_id":{"name":"either","disambiguator":[1033787165867077568,15814355551336177957]},"crate_root":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src","external_crates":[{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18244709825056937379,8541279172166540996]}},{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[5740174754597782991,14381932371412392788]}},{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5912038166719388440,1348551350470015689]}}],"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":0,"byte_end":29559,"line_start":1,"line_end":1146,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":177},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":1003,"byte_end":1007,"line_start":41,"line_end":41,"column_start":18,"column_end":22},"alias_span":null,"name":"Left","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":180},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":1009,"byte_end":1014,"line_start":41,"line_end":41,"column_start":24,"column_end":29},"alias_span":null,"name":"Right","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":0,"byte_end":29559,"line_start":1,"line_end":1146,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":174},{"krate":0,"index":217},{"krate":0,"index":213},{"krate":0,"index":208},{"krate":0,"index":204},{"krate":0,"index":196},{"krate":0,"index":192},{"krate":0,"index":187},{"krate":0,"index":183},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":71},{"krate":0,"index":76},{"krate":0,"index":81},{"krate":0,"index":87},{"krate":0,"index":91},{"krate":0,"index":95},{"krate":0,"index":101},{"krate":0,"index":117},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":129},{"krate":0,"index":220},{"krate":0,"index":224},{"krate":0,"index":130},{"krate":0,"index":135},{"krate":0,"index":140},{"krate":0,"index":145},{"krate":0,"index":150},{"krate":0,"index":154},{"krate":0,"index":158},{"krate":0,"index":159}],"decl_id":null,"docs":" The enum [`Either`] with variants `Left` and `Right` is a general purpose\n sum type with two cases.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":476,"byte_end":482,"line_start":16,"line_end":16,"column_start":55,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":177},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":1492,"byte_end":1496,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"name":"Left","qualname":"::Either::Left","value":"Either::Left(L)","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" A value of type `L`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":180},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":1534,"byte_end":1539,"line_start":55,"line_end":55,"column_start":5,"column_end":10},"name":"Right","qualname":"::Either::Right","value":"Either::Right(R)","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" A value of type `R`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":174},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":1444,"byte_end":1450,"line_start":51,"line_end":51,"column_start":10,"column_end":16},"name":"Either","qualname":"::Either","value":"Either::{Left, Right}","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":180}],"decl_id":null,"docs":" The enum `Either` with variants `Left` and `Right` is a general purpose\n sum type with two cases.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":3287,"byte_end":3294,"line_start":121,"line_end":121,"column_start":12,"column_end":19},"name":"is_left","qualname":"<Either<L, R>>::is_left","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the value is the `Left` variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":3697,"byte_end":3705,"line_start":137,"line_end":137,"column_start":12,"column_end":20},"name":"is_right","qualname":"<Either<L, R>>::is_right","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the value is the `Right` variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":4098,"byte_end":4102,"line_start":152,"line_end":152,"column_start":12,"column_end":16},"name":"left","qualname":"<Either<L, R>>::left","value":"fn (self) -> Option<L>","parent":null,"children":[],"decl_id":null,"docs":" Convert the left side of `Either<L, R>` to an `Option<L>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":4562,"byte_end":4567,"line_start":170,"line_end":170,"column_start":12,"column_end":17},"name":"right","qualname":"<Either<L, R>>::right","value":"fn (self) -> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Convert the right side of `Either<L, R>` to an `Option<R>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":5048,"byte_end":5054,"line_start":188,"line_end":188,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Either<L, R>>::as_ref","value":"fn (&self) -> Either<&L, &R>","parent":null,"children":[],"decl_id":null,"docs":" Convert `&Either<L, R>` to `Either<&L, &R>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":5727,"byte_end":5733,"line_start":213,"line_end":213,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<Either<L, R>>::as_mut","value":"fn (&mut self) -> Either<&mut L, &mut R>","parent":null,"children":[],"decl_id":null,"docs":" Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":6242,"byte_end":6246,"line_start":231,"line_end":231,"column_start":12,"column_end":16},"name":"flip","qualname":"<Either<L, R>>::flip","value":"fn (self) -> Either<R, L>","parent":null,"children":[],"decl_id":null,"docs":" Convert `Either<L, R>` to `Either<R, L>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":6791,"byte_end":6799,"line_start":250,"line_end":250,"column_start":12,"column_end":20},"name":"map_left","qualname":"<Either<L, R>>::map_left","value":"fn <F, M> (self, f: F) -> Either<M, R>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value in the `Left` variant if it is present rewrapping the\n result in `Left`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":7404,"byte_end":7413,"line_start":272,"line_end":272,"column_start":12,"column_end":21},"name":"map_right","qualname":"<Either<L, R>>::map_right","value":"fn <F, S> (self, f: F) -> Either<L, S>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value in the `Right` variant if it is present rewrapping the\n result in `Right`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":8205,"byte_end":8211,"line_start":298,"line_end":298,"column_start":12,"column_end":18},"name":"either","qualname":"<Either<L, R>>::either","value":"fn <F, G, T> (self, f: F, g: G) -> T","parent":null,"children":[],"decl_id":null,"docs":" Apply one of two functions depending on contents, unifying their result. If the value is\n `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second\n function `g` is applied.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":9030,"byte_end":9041,"line_start":328,"line_end":328,"column_start":12,"column_end":23},"name":"either_with","qualname":"<Either<L, R>>::either_with","value":"fn <Ctx, F, G, T> (self, ctx: Ctx, f: F, g: G) -> T","parent":null,"children":[],"decl_id":null,"docs":" Like `either`, but provide some context to whichever of the\n functions ends up being called.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":9694,"byte_end":9707,"line_start":350,"line_end":350,"column_start":12,"column_end":25},"name":"left_and_then","qualname":"<Either<L, R>>::left_and_then","value":"fn <F, S> (self, f: F) -> Either<S, R>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value in the `Left` variant if it is present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":10300,"byte_end":10314,"line_start":371,"line_end":371,"column_start":12,"column_end":26},"name":"right_and_then","qualname":"<Either<L, R>>::right_and_then","value":"fn <F, S> (self, f: F) -> Either<L, S>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value in the `Right` variant if it is present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":10847,"byte_end":10856,"line_start":391,"line_end":391,"column_start":12,"column_end":21},"name":"into_iter","qualname":"<Either<L, R>>::into_iter","value":"fn (self) -> Either<L::IntoIter, R::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Convert the inner value to an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":11722,"byte_end":11729,"line_start":420,"line_end":420,"column_start":12,"column_end":19},"name":"left_or","qualname":"<Either<L, R>>::left_or","value":"fn (self, other: L) -> L","parent":null,"children":[],"decl_id":null,"docs":" Return left value or given value","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":12234,"byte_end":12249,"line_start":439,"line_end":439,"column_start":12,"column_end":27},"name":"left_or_default","qualname":"<Either<L, R>>::left_or_default","value":"fn (self) -> L","parent":null,"children":[],"decl_id":null,"docs":" Return left or a default","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":12817,"byte_end":12829,"line_start":461,"line_end":461,"column_start":12,"column_end":24},"name":"left_or_else","qualname":"<Either<L, R>>::left_or_else","value":"fn <F> (self, f: F) -> L","parent":null,"children":[],"decl_id":null,"docs":" Returns left value or computes it from a closure","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":13626,"byte_end":13634,"line_start":489,"line_end":489,"column_start":12,"column_end":20},"name":"right_or","qualname":"<Either<L, R>>::right_or","value":"fn (self, other: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return right value or given value","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":14135,"byte_end":14151,"line_start":508,"line_end":508,"column_start":12,"column_end":28},"name":"right_or_default","qualname":"<Either<L, R>>::right_or_default","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return right or a default","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":14723,"byte_end":14736,"line_start":530,"line_end":530,"column_start":12,"column_end":25},"name":"right_or_else","qualname":"<Either<L, R>>::right_or_else","value":"fn <F> (self, f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns right value or computes it from a closure","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":15339,"byte_end":15350,"line_start":559,"line_end":559,"column_start":12,"column_end":23},"name":"unwrap_left","qualname":"<Either<L, R>>::unwrap_left","value":"fn (self) -> L","parent":null,"children":[],"decl_id":null,"docs":" Returns the left value","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":16042,"byte_end":16054,"line_start":590,"line_end":590,"column_start":12,"column_end":24},"name":"unwrap_right","qualname":"<Either<L, R>>::unwrap_right","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the right value","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":16747,"byte_end":16758,"line_start":619,"line_end":619,"column_start":12,"column_end":23},"name":"expect_left","qualname":"<Either<L, R>>::expect_left","value":"fn (self, msg: &str) -> L","parent":null,"children":[],"decl_id":null,"docs":" Returns the left value","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":17421,"byte_end":17433,"line_start":648,"line_end":648,"column_start":12,"column_end":24},"name":"expect_right","qualname":"<Either<L, R>>::expect_right","value":"fn (self, msg: &str) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the right value","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":18128,"byte_end":18140,"line_start":672,"line_end":672,"column_start":12,"column_end":24},"name":"factor_first","qualname":"<Either<(T, L), (T, R)>>::factor_first","value":"fn (self) -> (T, Either<L, R>)","parent":null,"children":[],"decl_id":null,"docs":" Factor out a homogeneous type from an either of pairs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":18793,"byte_end":18806,"line_start":693,"line_end":693,"column_start":12,"column_end":25},"name":"factor_second","qualname":"<Either<(L, T), (R, T)>>::factor_second","value":"fn (self) -> (Either<L, R>, T)","parent":null,"children":[],"decl_id":null,"docs":" Factor out a homogeneous type from an either of pairs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":19316,"byte_end":19326,"line_start":713,"line_end":713,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Either<T, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Extract the value of an either over two equivalent types.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":19695,"byte_end":19698,"line_start":728,"line_end":728,"column_start":12,"column_end":15},"name":"map","qualname":"<Either<T, T>>::map","value":"fn <F, M> (self, f: F) -> Either<M, M>","parent":null,"children":[],"decl_id":null,"docs":" Map `f` over the contained value and return the result in the\n corresponding variant.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":2989,"byte_end":2995,"line_start":111,"line_end":111,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":47},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":17648,"byte_end":17654,"line_start":659,"line_end":659,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":18310,"byte_end":18316,"line_start":680,"line_end":680,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":18970,"byte_end":18976,"line_start":701,"line_end":701,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":19998,"byte_end":20004,"line_start":740,"line_end":740,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":20261,"byte_end":20267,"line_start":750,"line_end":750,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":20442,"byte_end":20448,"line_start":759,"line_end":759,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":20749,"byte_end":20755,"line_start":773,"line_end":773,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":21863,"byte_end":21869,"line_start":822,"line_end":822,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":22109,"byte_end":22115,"line_start":832,"line_end":832,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":23543,"byte_end":23549,"line_start":891,"line_end":891,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":24753,"byte_end":24759,"line_start":940,"line_end":940,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":24956,"byte_end":24962,"line_start":950,"line_end":950,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":25167,"byte_end":25173,"line_start":960,"line_end":960,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":25366,"byte_end":25372,"line_start":970,"line_end":970,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":25582,"byte_end":25588,"line_start":982,"line_end":982,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":26273,"byte_end":26279,"line_start":1011,"line_end":1011,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":2989,"byte_end":2995,"line_start":111,"line_end":111,"column_start":12,"column_end":18},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":17648,"byte_end":17654,"line_start":659,"line_end":659,"column_start":15,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":18310,"byte_end":18316,"line_start":680,"line_end":680,"column_start":15,"column_end":21},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":18970,"byte_end":18976,"line_start":701,"line_end":701,"column_start":9,"column_end":15},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":19998,"byte_end":20004,"line_start":740,"line_end":740,"column_start":35,"column_end":41},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":20261,"byte_end":20267,"line_start":750,"line_end":750,"column_start":35,"column_end":41},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":2218}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":20442,"byte_end":20448,"line_start":759,"line_end":759,"column_start":29,"column_end":35},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":3817}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":20749,"byte_end":20755,"line_start":773,"line_end":773,"column_start":25,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":21863,"byte_end":21869,"line_start":822,"line_end":822,"column_start":36,"column_end":42},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":3767}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":22109,"byte_end":22115,"line_start":832,"line_end":832,"column_start":34,"column_end":40},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":3796}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":23543,"byte_end":23549,"line_start":891,"line_end":891,"column_start":38,"column_end":44},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":2212}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":24753,"byte_end":24759,"line_start":940,"line_end":940,"column_start":40,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":2212}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":24956,"byte_end":24962,"line_start":950,"line_end":950,"column_start":38,"column_end":44},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":2215}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":25167,"byte_end":25173,"line_start":960,"line_end":960,"column_start":40,"column_end":46},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":2215}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":25366,"byte_end":25372,"line_start":970,"line_end":970,"column_start":22,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":25582,"byte_end":25588,"line_start":982,"line_end":982,"column_start":25,"column_end":31},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":1714}},{"span":{"file_name":"/home/matt/.cargo/registry/src/github.com-1ecc6299db9ec823/either-1.6.1/src/lib.rs","byte_start":26273,"byte_end":26279,"line_start":1011,"line_end":1011,"column_start":29,"column_end":35},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":174},"to":{"krate":1,"index":7484}}]}